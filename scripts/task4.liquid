{% style %}
  .feature-block {
    max-width: 1440px;
    margin: 0 auto;
    display: grid;
    align-items: center;
    grid-template-columns: repeat(1, 1fr);
    background-color: {{ section.settings.background_color }};
    overflow: hidden;
    font-family: var(--font-body-family);
  }

  @media screen and (min-width: 768px) {
    .feature-block {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  .feature-block__media {
    position: relative;
    width: 100%;
    height: 100%;
    aspect-ratio: 1.25 / 1;
  }

  @media screen and (min-width: 768px) {
    .feature-block__media {
      aspect-ratio: unset;
    }
  }

  .feature-block__media img {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .feature-block__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 3.906rem 1rem;
  }

  @media screen and (min-width: 768px) {
    .feature-block__content {
      min-height: 576px;
      padding: 3.906rem 2rem;
    }
  }

  @media screen and (min-width: 1024px) {
    .feature-block__content {
      padding: 6.5rem;
    }
  }

  .feature-block__heading {
    margin-bottom: 1rem;
    font-weight: 275;
    font-size: 1.5rem;
    line-height: 31.2px;
    text-transform: uppercase;
    color: {{ section.settings.heading_color }};
  }

  @media screen and (min-width: 768px) {
    .feature-block__heading {
      font-size: 2rem;
      line-height: 41.6px;
    }
  }

  .feature-block__description {
    font-weight: 300;
    line-height: 21px;
    font-size: 1rem;
    color: {{ section.settings.text_color }};
  }

  @media screen and (min-width: 768px) {
    .feature-block__description {
      font-size: 1.125rem;
      line-height: 23px;
    }
  }

  .feature-block__cta {
    appearance: none;
    border: 1px solid {{ section.settings.button_color }};
    margin: 1.5rem 0 0;
    padding: 0;
    outline: none;
    min-width: 110px;
    min-height: 48px;
    background-color: transparent;
    font-size: 0.75rem;
    font-weight: 500;
    line-height: 0.975rem;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
    color: {{ section.settings.button_color }};
  }

  .feature-block__cta:hover {
    background-color: {{ section.settings.button_color }};
    color: {{ section.settings.button_hover_color }};
  }

  @media screen and (min-width: 768px) {
    .feature-block__cta {
      min-width: 170px;
      font-size: 0.875rem;
      line-height: 1.138rem;
      min-height: 52px;
    }
  }
{% endstyle %}

<div class="feature-block" id="feature-block-{{ section.id }}">
  <div class="feature-block__media">
    {%- if section.settings.image != blank -%}
      {{
        section.settings.image
        | image_url: width: 800
        | image_tag: loading: 'lazy', width: section.settings.image.width, height: section.settings.image.height
      }}
    {%- else -%}
      {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
    {%- endif -%}
  </div>

  <div class="feature-block__content">
    <h3 class="feature-block__heading">{{ section.settings.heading }}</h3>
    <div class="feature-block__description">{{ section.settings.description }}</div>
    {%- if section.settings.button_label != blank -%}
      <button class="feature-block__cta" type="button">
        {{- section.settings.button_label -}}
      </button>
    {%- endif -%}
  </div>
</div>

<script>
  class FeatureBlock extends HTMLElement {
    constructor() {
      super();
      this.button = this.querySelector('.feature-block__cta');
      this.content = this.querySelector('.feature-block__content');
      this.heading = this.querySelector('.feature-block__heading');
      this.description = this.querySelector('.feature-block__description');
      this.image = this.querySelector('.feature-block__media');
      this.currentIndex = 0;
      this.isFirstToggle = true;

      // Content cycles
      this.contents = [
        {
          title: {{ section.settings.heading | json }},
          text: {{ section.settings.description | strip_html | json }}
        },
        {
          title: "Sustainably Made with Care",
          text: "We take pride in our commitment to sustainable practices and ethical sourcing. Each piece is carefully crafted with attention to detail and respect for our environment."
        },
        {
          title: "Quality That Speaks for Itself",
          text: "Our dedication to excellence shows in every product we create. Using only the finest materials and time-honored techniques to ensure lasting quality."
        }
      ];

      if (this.button) {
        this.button.addEventListener('click', this.handleClick.bind(this));
      }

      window.addEventListener('resize', this.debounce(this.setHeight.bind(this), 100));

      this.initAnimation();
    }

    debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    getContentPadding() {
      const viewportWidth = window.innerWidth;
      if (viewportWidth >= 1024) {
        return 6.5 * 2 * 16;
      } else if (viewportWidth >= 768) {
        return 3.906 * 2 * 16;
      } else {
        return 3.906 * 2 * 16;
      }
    }

    setHeight() {
      if (!this.isFirstToggle) {
        const padding = this.getContentPadding();
        const titleMarginBottom = 16;
        const buttonMarginTop = 24;

        const contentHeight =
          this.heading.offsetHeight +
          titleMarginBottom +
          this.description.offsetHeight +
          buttonMarginTop +
          this.button.offsetHeight;

        const newHeight = contentHeight + padding;

        gsap.to(this.content, {
          height: newHeight,
          duration: 0.5,
          ease: "power2.inOut"
        });
      }
    }

    handleClick() {
      const tl = gsap.timeline();

      // Animate out
      tl.to([this.heading, this.description, this.button], {
        opacity: 0,
        y: -20,
        duration: 0.3,
        stagger: 0.1,
        onComplete: () => {
          // Update content
          this.currentIndex = (this.currentIndex + 1) % this.contents.length;
          this.heading.textContent = this.contents[this.currentIndex].title;
          this.description.textContent = this.contents[this.currentIndex].text;

          if (this.isFirstToggle) {
            const padding = this.getContentPadding();
            const contentHeight =
              this.heading.offsetHeight +
              this.description.offsetHeight +
              this.button.offsetHeight;
            const newHeight = contentHeight + padding;
            gsap.set(this.content, { height: newHeight });
            this.isFirstToggle = false;
          } else {
            this.setHeight();
          }

          // Animate in
          gsap.to([this.heading, this.description, this.button], {
            opacity: 1,
            y: 0,
            duration: 0.5,
            stagger: 0.1,
            ease: "back.out(1.7)"
          });
        }
      });
    }

    initAnimation() {
      // Initial states
      gsap.set(this.image, {
        opacity: 0,
        x: -50
      });

      gsap.set([this.heading, this.description, this.button], {
        opacity: 0,
        y: 20
      });

      // Create intersection observer
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.animate();
            }
          });
        },
        {
          threshold: 0.2,
          rootMargin: '-10%'
        }
      );

      observer.observe(this);
    }

    animate() {
      const tl = gsap.timeline();

      tl.to(this.image, {
        opacity: 1,
        x: 0,
        duration: 1,
        ease: "power3.out"
      })
      .to(this.heading, {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: "back.out(1.7)"
      }, "-=0.4")
      .to(this.description, {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: "back.out(1.7)"
      }, "-=0.4")
      .to(this.button, {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: "back.out(1.7)"
      }, "-=0.4");
    }
  }

  customElements.define('feature-block', FeatureBlock);
</script>

{% schema %}
{
  "name": "Feature Block",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "Image"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Handcrafted and Responsibly Sourced"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment.</p>"
    },
    {
      "type": "text",
      "id": "button_label",
      "label": "Button Label",
      "default": "Learn more"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#e3cfcf"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button Hover Text Color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Feature Block",
      "category": "Content"
    }
  ]
}
{% endschema %}
